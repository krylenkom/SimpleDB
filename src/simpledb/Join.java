package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends AbstractDbIterator {
    private final TupleDesc tupleDesc;
    private final List<Tuple> tuples;
    private Iterator<Tuple> inner;

    /**
     * Constructor.  Accepts to children to join and the predicate
     * to join them on
     *
     * @param p      The predicate to use to join the children
     * @param child1 Iterator for the left(outer) relation to join
     * @param child2 Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, DbIterator child1, DbIterator child2) {
        TupleDesc td1 = child1.getTupleDesc();
        TupleDesc td2 = child2.getTupleDesc();
        this.tupleDesc = TupleDesc.combine(td1, td2);
        this.tuples = new LinkedList<Tuple>();
        try {
            child1.open();
            child2.open();
            while (child1.hasNext()) {
                Tuple tuple1 = child1.next();
                while (child2.hasNext()) {
                    Tuple tuple2 = child2.next();
                    if (p.filter(tuple1, tuple2)) {
                        this.tuples.add(join(tuple1, tuple2));
                    }
                }
                child2.rewind();
            }
        } catch (Exception e){
          // do nothing
        }
    }

    /**
     * @see simpledb.TupleDesc#combine(TupleDesc, TupleDesc) for possible implementation logic.
     */
    public TupleDesc getTupleDesc() {
        // some code goes here
        return this.tupleDesc;
    }

    public void open()
            throws DbException, NoSuchElementException, TransactionAbortedException {
        this.inner = tuples.iterator();
    }

    public void close() {
        this.inner = null;
    }

    public void rewind() throws DbException, TransactionAbortedException {
        open();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no more tuples.
     * Logically, this is the next tuple in r1 cross r2 that satisfies the join
     * predicate.  There are many possible implementations; the simplest is a
     * nested loops join.
     * <p/>
     * Note that the tuples returned from this particular implementation of
     * Join are simply the concatenation of joining tuples from the left and
     * right relation. Therefore, there will be two copies of the join attribute
     * in the results.  (Removing such duplicate columns can be done with an
     * additional projection operator if needed.)
     * <p/>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     *
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple readNext() throws TransactionAbortedException, DbException {
        return this.inner.hasNext() ? this.inner.next() : null;
    }

    private Tuple join(Tuple tuple1, Tuple tuple2) {
        Tuple tuple = new Tuple(getTupleDesc());
        int numFields1 = tuple1.getTupleDesc().numFields();
        for (int index = 0; index < numFields1; index++) {
            tuple.setField(index, tuple1.getField(index));
        }
        for (int index = 0; index < tuple2.getTupleDesc().numFields(); index++) {
            tuple.setField(index + numFields1, tuple2.getField(index));
        }
        return tuple;
    }
}
